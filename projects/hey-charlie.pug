---
layout: project
title: 'Hey,Charlie'
---
include mixins
- setAllFiles({{ site.static_files | jsonify }});

p.flow-text.
  During the Summer of 2016, I had the good fortune of meeting the people behind #[a(href='http://heycharlie.org') Hey,Charlie], a mobile application that helps recovering opioid addicts avoid people and places which may cause them to relapse. I thought the idea had an enormous potential to do actual good in people's lives, so I decided to volunteer my Android development skills to the project.

p.flow-text.
  The prototype of the app was pretty simple. The user would mark people and places they wanted to avoid using their contacts list and a map view. Then the app would periodically check if the user was messaging people or going too close to places they wanted to avoid and send the user a notification to give them encouragement or the option to call the number of someone who could help them.

+photos('/img/hey-charlie/')

p.flow-text.
  There were a fair number of challenges involved with prototyping the app. To implement the features in the way we wanted, we needed a fair amount of control over functions that the AndroidOS wasn't readily willing to give up. Getting access to the user's notifications requires requesting a special permission, which was annoying for onboarding and UX. In addition, the notification API does not allow for any modification of existing notifications. What I ended up doing was canceling the notification received by the user and recreating it immediately after with the extra button. This worked most of the time, but on certain devices the original notification would still show up half a second before the new notification replaced it, which created a very strange visual effect. Unfortunately, I had to work on other features before I could come up with a fix.

p.flow-text.
  Many of the people on the original Hey,Charlie team were unfamiliar with Android development which created its own challenges. I originally wanted to use the #[a(href='https://github.com/ReactiveX/RxAndroid') RXAndroid] library to handle async behavior, but after talking to some of the team about it, I decided that the learning curve would be too steep to justify any productivity gains. To handle asynchronicity, I decided to use an event based pub-sub system, which worked fine and was easier for everyone to understand. Sometimes, it's better to use an easy to understand abstraction than a more robust, but complicated abstraction.

p.flow-text.
  In the Fall of 2016 I left the Hey,Charlie project to focus on my course work. I was glad to hear that the project was accepted into the MassChallenge Digital Healthcare Accelerator. I wish the best of luck to everyone still involved with Hey,Charlie. Although the phrase is a bit of a joke in startup culture, I actually think they're making the world a better place.

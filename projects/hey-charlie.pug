---
layout: project
title: 'Hey,Charlie'
---
include mixins
- setAllFiles({{ site.static_files | jsonify }});

p.flow-text.
  During the Summer of 2016, I had the good fortune of meeting the people behind #[a(href='http://heycharlie.org') Hey,Charlie], a mobile application focused on helping recovering opioid addicts avoid people and places that might trigger a relapse. I thought the idea had an enormous potential to have a positive impact on the opioid crisis and do actual good in people's lives, so I decided to volunteer my Android development skills to the project.

+photos('/img/hey-charlie/')

p.flow-text.
  There were a fair number of challenges involved with prototyping the app. To implement the features we wanted, we needed a fair amount of control over functions that the AndroidOS wasn't readily willing to give up. The most frustrating example of this was when I was implementing a feature to add an automated reply button on message notifications from people on the user's "watchlist," the list of people the user marks as bad for their sobriety. Getting access to the user's notifications requires requesting a special permission, which was a problem for onboarding and UX, but on top of that the notification API does not allow for modification of existing notifications. What I ended up doing was canceling the notification received by the user and recreating it immediately after with the extra button. This worked most of the time, but on certain devices the original notification would still show up half a second before the new notification replaced it, which created a very strange visual effect. Unfortunately, I had to work on other features before I fixed the buggy behavior.

p.flow-text.
  Many of the people on the original Hey,Charlie team were unfamiliar with Android development and this posed its own challenges. I originally wanted to use the #[a(href='https://github.com/ReactiveX/RxAndroid') RXAndroid] library to handle async behavior, but after talking to some of my teammates about it, I decided that the learning curve would be too steep to justify any productivity gains. I decided to go with a normal event based pub-sub system, which worked just fine considering the scope of the original prototype was very limited.

p.flow-text.
  I came to the conclusion on this project that sometimes it's better to do the standard way of doing things even if you think you have a better way. I honestly don't like the way the Android team designs their APIs. I really don't care for broadcast managers, content providers, and async tasks. Kudos to the Android team for trying to make Java performant on phones, but still... I tried every chance I got to do things my way and I ended up wasting a lot of time fighting the system when I probably should have just submitted to the will of my framework overlords.

p.flow-text.
  In the Fall of 2016 I left the Hey,Charlie project to focus on my course work. I was glad to hear that the project was accepted into the MassChallenge Digital Healthcare Accelerator. I wish the best of luck to everyone still involved with Hey,Charlie. Although the phrase is a bit of a joke in startup culture, I actually think they're making the world a better place.
